[{"categories":null,"content":" 關於咖啡廳的 wifi router 咖啡廳wifi router的常見的攻擊 - WiFi Sniffing\nWiFi Sniffing:是指使用特殊的軟體工具來監聽傳輸在 Wi-Fi 網絡上的封包,包括帳號密碼這些敏感資訊.\n要進行WiFi Sniffing,通常使用以下方法:\n監聽 Wi-Fi 流量 假冒 Wi-Fi AP 我們將使用scapy\nhttps://scapy.net/\nScapy is a powerful interactive packet manipulation program.\n1 pip3 install scapy 監聽 Wi-Fi 流量 使用scapy監聽wlan0 interface上的流量, 如果是 tcp 就輸出摘要.\n1 2 3 4 5 6 7 from scapy.all import * def packet_handler(pkt): if pkt.haslayer(TCP): print(pkt.summary()) sniff(iface=\"wlan0\", prn=packet_handler) 假冒 Wi-Fi AP 使用scapy.sendp在無窮迴圈中broadcasts Beacon frame\nBeacon frame : Beacon frame is one of the management frames in IEEE 802.11 based WLANs. It contains all the information about the network. Beacon frames are transmitted periodically, they serve to announce the presence of a wireless LAN and to synchronise the members of the service set. - wikipedia\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 from scapy.all import * def packet_handler(pkt): if pkt.haslayer(TCP): print(pkt.summary()) def start_fake_ap(): ap_name = \"Free WiFi\" ap_mac = \"00:11:22:33:44:55\" beacon = Dot11Beacon(cap=\"ESS+privacy\") essid = Dot11Elt(ID=\"SSID\",info=ap_name, len=len(ap_name)) dsset = Dot11Elt(ID=\"DSset\",info=\"\\x01\") rsn = Dot11Elt(ID='RSNinfo', info=( '\\x01\\x00' #RSN Version 1 '\\x00\\x0f\\xac\\x02' #Group Cipher Suite : 00-0f-ac TKIP '\\x02\\x00' #2 Pairwise Cipher Suites (next two lines) '\\x00\\x0f\\xac\\x04' #AES Cipher '\\x00\\x0f\\xac\\x02' #TKIP Cipher '\\x01\\x00' #1 Authentication Key Managment Suite (line below) '\\x00\\x0f\\xac\\x02' #Pre-Shared Key )) frame = RadioTap()/beacon/essid/dsset/rsn while True: sendp(frame, iface=\"wlan0\") sniff(iface=\"wlan0\", prn=packet_handler) start_fake_ap() ","description":"","tags":["python","wifi"],"title":"Wifi Sniffer","uri":"/2023/02/wifi-sniffer/"},{"categories":["Note","Obsidian","Github"],"content":"先備知識\ngithub obsidian Linux and Mac OS X 安裝 git\nMac OS X (透過 Homebrew)\n1 brew install git Linux (Debian/Ubuntu)\n1 sudo apt-get install git Clone the repository\n進入存放repository的folder\n1 cd ~/repositories clone\n1 git clone https://github.com/{your_username}/{your_repository} 在Obsidian開啟vault,並選則該repository\nAndroid 安裝Termux\nGoogle Play\n更新pkg資料庫 \u0026\u0026 升級已安裝軟體\npkg update \u0026\u0026 pkg upgrade -y 安裝git的client端\npkg install git 給Termux訪問儲存空間的權限\ntermux-setup-storage 進入shared目錄\ncd /storage/shared 創建Obsidian使用的目錄並進入\nmkdir obsidian cd obsidian Clone the repository\n因為在 android手機上打字不那麼方便,我會將token存在~/.git-credentials.下次git pull就不用再輸入一次.\n注意 : ~/.git-credentials 會以明文儲存,確保你沒有給你的 token 太大的權限\ngit config --global credential.helper store git clone\ngit clone https://github.com/{your_username}/{your_repository} Push \u0026\u0026 Pull\n因為已經儲存github token了,pull跟push時不用再輸入一次username跟password\ngit pull Push\ngit push 在Obsidian開啟vault\n","description":"","tags":["note","github","obsidian"],"title":"Sync Obsidian with Github","uri":"/2023/02/snyc-obsidian-with-github/"},{"categories":["Golang","Blog"],"content":"\n1. Download and Install HUGO Hugo currently provides pre-built binaries for the following:\nmacOS (Darwin) for x64, i386, and ARM architectures Windows Linux OpenBSD FreeBSD You can get the release distribution from HUGO’s github\nor using command line :\nSnap (Linux)\nThe extended version with Sass/SCSS support\n$ snap install hugo --channel=extended The non-extended version without Sass/SCSS support\n$ snap install hugo Homebrew (macOS)\n$ brew install hugo Chocokatey (Windows)\n$ choco install hugo -confirm 2. Create a New Site Create a HUGO template\nnew : Create new content for your site\n$ hugo new site blog $ tree blog You can see the project layout\nblog ├── archetypes │ └── default.md ├── config.toml ├── content ├── data ├── layouts ├── public ├── static └── themes Try to add a theme\nyou can find HUGO themes in themes.gohugo.io\ne.g. hugo-theme-meme $ cd blog /blog $ git init // if you didn't initialize your repository /blog $ git submodule add --depth 1 https://github.com/reuixiy/hugo-theme-meme.git themes/meme Replace config.tomlwith hugo-theme-meme config example\n/blog $ rm config.toml \u0026\u0026 cp themes/meme/config-examples/en/config.toml config.toml Create a new post and the about page\n/blog $ hugo new \"posts/hello-world.md\" /blog $ hugo new \"about/_index.md\" Run the hugo server\n-D, –buildDrafts : include content marked as draft\n/blog $ hugo server -D Web Server is available at http://localhost:1313/\nLet’s type something in /blog/content/posts/hello.world\nAfter saving it, Hugo will rebuild the site\n","description":"","tags":["golang","hugo"],"title":"Start blog with HUGO","uri":"/2022/07/start_blog_with_hugo/"}]